{
  "__meta": {
    "schema_version": 3,
    "schema_name": "DocsV3",
    "schema_type": "Iced"
  },
  "routes": [
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/CreateFrame",
      "summary": "Create a synthetic H2O Frame.",
      "handler_class": "class water.api.CreateFrameHandler",
      "handler_method": "public water.api.CreateFrameV3 water.api.CreateFrameHandler.run(int,water.api.CreateFrameV3)",
      "input_schema": "CreateFrameV3",
      "output_schema": "CreateFrameV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/SplitFrame",
      "summary": "Split a H2O Frame.",
      "handler_class": "class water.api.SplitFrameHandler",
      "handler_method": "public water.api.SplitFrameV3 water.api.SplitFrameHandler.run(int,water.api.SplitFrameV3)",
      "input_schema": "SplitFrameV3",
      "output_schema": "SplitFrameV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/MissingInserter",
      "summary": "Insert missing values.",
      "handler_class": "class water.api.MissingInserterHandler",
      "handler_method": "public water.api.MissingInserterV3 water.api.MissingInserterHandler.run(int,water.api.MissingInserterV3)",
      "input_schema": "MissingInserterV3",
      "output_schema": "MissingInserterV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/ImportFiles",
      "summary": "Import raw data files into a single-column H2O Frame.",
      "handler_class": "class water.api.ImportFilesHandler",
      "handler_method": "public water.api.ImportFilesV3 water.api.ImportFilesHandler.importFiles(int,water.api.ImportFilesV3)",
      "input_schema": "ImportFilesV3",
      "output_schema": "ImportFilesV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ParseSetup",
      "summary": "Guess the parameters for parsing raw byte-oriented data into an H2O Frame.",
      "handler_class": "class water.api.ParseSetupHandler",
      "handler_method": "public water.api.ParseSetupV3 water.api.ParseSetupHandler.guessSetup(int,water.api.ParseSetupV3)",
      "input_schema": "ParseSetupV3",
      "output_schema": "ParseSetupV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/Parse",
      "summary": "Parse a raw byte-oriented Frame into a useful columnar data Frame.",
      "handler_class": "class water.api.ParseHandler",
      "handler_method": "public water.api.ParseV3 water.api.ParseHandler.parse(int,water.api.ParseV3)",
      "input_schema": "ParseV3",
      "output_schema": "ParseV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Cloud",
      "summary": "Determine the status of the nodes in the H2O cloud.",
      "handler_class": "class water.api.CloudHandler",
      "handler_method": "public water.api.CloudV3 water.api.CloudHandler.status(int,water.api.CloudV3)",
      "input_schema": "CloudV3",
      "output_schema": "CloudV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "HEAD",
      "url_pattern": "/3/Cloud",
      "summary": "Determine the status of the nodes in the H2O cloud.",
      "handler_class": "class water.api.CloudHandler",
      "handler_method": "public water.api.CloudV3 water.api.CloudHandler.status(int,water.api.CloudV3)",
      "input_schema": "CloudV3",
      "output_schema": "CloudV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Jobs",
      "summary": "Get a list of all the H2O Jobs (long-running actions).",
      "handler_class": "class water.api.JobsHandler",
      "handler_method": "public water.api.Schema water.api.JobsHandler.list(int,water.api.JobsV3)",
      "input_schema": "JobsV3",
      "output_schema": "Schema",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Timeline",
      "summary": "Something something something.",
      "handler_class": "class water.api.TimelineHandler",
      "handler_method": "public water.api.TimelineV3 water.api.TimelineHandler.fetch(int,water.api.TimelineV3)",
      "input_schema": "TimelineV3",
      "output_schema": "TimelineV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Profiler",
      "summary": "Something something something.",
      "handler_class": "class water.api.ProfilerHandler",
      "handler_method": "public water.api.ProfilerV3 water.api.ProfilerHandler.fetch(int,water.api.ProfilerV3)",
      "input_schema": "ProfilerV3",
      "output_schema": "ProfilerV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/JStack",
      "summary": "Something something something.",
      "handler_class": "class water.api.JStackHandler",
      "handler_method": "public water.api.JStackV3 water.api.JStackHandler.fetch(int,water.api.JStackV3)",
      "input_schema": "JStackV3",
      "output_schema": "JStackV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/NetworkTest",
      "summary": "Something something something.",
      "handler_class": "class water.api.NetworkTestHandler",
      "handler_method": "public water.api.NetworkTestV3 water.api.NetworkTestHandler.fetch(int,water.api.NetworkTestV3)",
      "input_schema": "NetworkTestV3",
      "output_schema": "NetworkTestV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/UnlockKeys",
      "summary": "Unlock all keys in the H2O distributed K/V store, to attempt to recover from a crash.",
      "handler_class": "class water.api.UnlockKeysHandler",
      "handler_method": "public water.api.UnlockKeysV3 water.api.UnlockKeysHandler.unlock(int,water.api.UnlockKeysV3)",
      "input_schema": "UnlockKeysV3",
      "output_schema": "UnlockKeysV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/Shutdown",
      "summary": "Shut down the cluster",
      "handler_class": "class water.api.ShutdownHandler",
      "handler_method": "public water.api.ShutdownV3 water.api.ShutdownHandler.shutdown(int,water.api.ShutdownV3)",
      "input_schema": "ShutdownV3",
      "output_schema": "ShutdownV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Tutorials",
      "summary": "H2O tutorials.",
      "handler_class": "class water.api.TutorialsHandler",
      "handler_method": "public water.api.TutorialsV3 water.api.TutorialsHandler.nop(int,water.api.TutorialsV3)",
      "input_schema": "TutorialsV3",
      "output_schema": "TutorialsV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/About",
      "summary": "Return information about this H2O.",
      "handler_class": "class water.api.AboutHandler",
      "handler_method": "public water.api.AboutHandler$AboutV3 water.api.AboutHandler.get(int,water.api.AboutHandler$AboutV3)",
      "input_schema": "AboutV3",
      "output_schema": "AboutV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Metadata/endpoints/(?<num>[0-9]+)",
      "summary": "Return the REST API endpoint metadata, including documentation, for the endpoint specified by number.",
      "handler_class": "class water.api.DocsHandler",
      "handler_method": "public water.api.DocsV3 water.api.DocsHandler.fetchRoute(int,water.api.DocsV3)",
      "input_schema": "DocsV3",
      "output_schema": "DocsV3",
      "doc_method": "",
      "path_params": [
        "num"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Metadata/endpoints/(?<path>.*)",
      "summary": "Return the REST API endpoint metadata, including documentation, for the endpoint specified by path.",
      "handler_class": "class water.api.DocsHandler",
      "handler_method": "public water.api.DocsV3 water.api.DocsHandler.fetchRoute(int,water.api.DocsV3)",
      "input_schema": "DocsV3",
      "output_schema": "DocsV3",
      "doc_method": "",
      "path_params": [
        "path"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Metadata/endpoints",
      "summary": "Return a list of all the REST API endpoints.",
      "handler_class": "class water.api.DocsHandler",
      "handler_method": "public water.api.DocsV3 water.api.DocsHandler.listRoutes(int,water.api.DocsV3)",
      "input_schema": "DocsV3",
      "output_schema": "DocsV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Metadata/schemaclasses/(?<classname>.*)",
      "summary": "Return the REST API schema metadata for specified schema class.",
      "handler_class": "class water.api.DocsHandler",
      "handler_method": "public water.api.DocsV3 water.api.DocsHandler.fetchSchemaMetadataByClass(int,water.api.DocsV3)",
      "input_schema": "DocsV3",
      "output_schema": "DocsV3",
      "doc_method": "",
      "path_params": [
        "classname"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Metadata/schemas/(?<schemaname>.*)",
      "summary": "Return the REST API schema metadata for specified schema.",
      "handler_class": "class water.api.DocsHandler",
      "handler_method": "public water.api.DocsV3 water.api.DocsHandler.fetchSchemaMetadata(int,water.api.DocsV3)",
      "input_schema": "DocsV3",
      "output_schema": "DocsV3",
      "doc_method": "",
      "path_params": [
        "schemaname"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Metadata/schemas",
      "summary": "Return list of all REST API schemas.",
      "handler_class": "class water.api.DocsHandler",
      "handler_method": "public water.api.DocsV3 water.api.DocsHandler.listSchemas(int,water.api.DocsV3)",
      "input_schema": "DocsV3",
      "output_schema": "DocsV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Typeahead/files",
      "summary": "Typehead hander for filename completion.",
      "handler_class": "class water.api.TypeaheadHandler",
      "handler_method": "public water.api.Schema water.api.TypeaheadHandler.files(int,water.api.TypeaheadV3)",
      "input_schema": "TypeaheadV3",
      "output_schema": "Schema",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Jobs/(?<jobid>.*)",
      "summary": "Get the status of the given H2O Job (long-running action).",
      "handler_class": "class water.api.JobsHandler",
      "handler_method": "public water.api.Schema water.api.JobsHandler.fetch(int,water.api.JobsV3)",
      "input_schema": "JobsV3",
      "output_schema": "Schema",
      "doc_method": "",
      "path_params": [
        "job_id"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/Jobs/(?<jobid>.*)/cancel",
      "summary": "Cancel a running job.",
      "handler_class": "class water.api.JobsHandler",
      "handler_method": "public water.api.Schema water.api.JobsHandler.cancel(int,water.api.JobsV3)",
      "input_schema": "JobsV3",
      "output_schema": "Schema",
      "doc_method": "",
      "path_params": [
        "job_id"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Find",
      "summary": "Find a value within a Frame.",
      "handler_class": "class water.api.FindHandler",
      "handler_method": "public water.api.FindV3 water.api.FindHandler.find(int,water.api.FindV3)",
      "input_schema": "FindV3",
      "output_schema": "FindV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Frames/(?<frameid>.*)/export/(?<path>.*)/overwrite/(?<force>.*)",
      "summary": "Export a Frame to the given path with optional overwrite.",
      "handler_class": "class water.api.FramesHandler",
      "handler_method": "public water.api.FramesV3 water.api.FramesHandler.export(int,water.api.FramesV3)",
      "input_schema": "FramesV3",
      "output_schema": "FramesV3",
      "doc_method": "",
      "path_params": [
        "frame_id",
        "path",
        "force"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Frames/(?<frameid>.*)/columns/(?<column>.*)/summary",
      "summary": "Return the summary metrics for a column, e.g. mins, maxes, mean, sigma, percentiles, etc.",
      "handler_class": "class water.api.FramesHandler",
      "handler_method": "public water.api.FramesV3 water.api.FramesHandler.columnSummary(int,water.api.FramesV3)",
      "input_schema": "FramesV3",
      "output_schema": "FramesV3",
      "doc_method": "public java.lang.StringBuffer water.api.FramesHandler.columnSummaryDocs(int,java.lang.StringBuffer)",
      "path_params": [
        "frame_id",
        "column"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Frames/(?<frameid>.*)/columns/(?<column>.*)/domain",
      "summary": "Return the domains for the specified column. \"null\" if the column is not an Enum.",
      "handler_class": "class water.api.FramesHandler",
      "handler_method": "public water.api.FramesV3 water.api.FramesHandler.columnDomain(int,water.api.FramesV3)",
      "input_schema": "FramesV3",
      "output_schema": "FramesV3",
      "doc_method": "",
      "path_params": [
        "frame_id",
        "column"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Frames/(?<frameid>.*)/columns/(?<column>.*)",
      "summary": "Return the specified column from a Frame.",
      "handler_class": "class water.api.FramesHandler",
      "handler_method": "public water.api.FramesV3 water.api.FramesHandler.column(int,water.api.FramesV3)",
      "input_schema": "FramesV3",
      "output_schema": "FramesV3",
      "doc_method": "",
      "path_params": [
        "frame_id",
        "column"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Frames/(?<frameid>.*)/columns",
      "summary": "Return all the columns from a Frame.",
      "handler_class": "class water.api.FramesHandler",
      "handler_method": "public water.api.FramesV3 water.api.FramesHandler.columns(int,water.api.FramesV3)",
      "input_schema": "FramesV3",
      "output_schema": "FramesV3",
      "doc_method": "",
      "path_params": [
        "frame_id"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Frames/(?<frameid>.*)/summary",
      "summary": "Return a Frame, including the histograms, after forcing computation of rollups.",
      "handler_class": "class water.api.FramesHandler",
      "handler_method": "public water.api.FramesV3 water.api.FramesHandler.summary(int,water.api.FramesV3)",
      "input_schema": "FramesV3",
      "output_schema": "FramesV3",
      "doc_method": "",
      "path_params": [
        "frame_id"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Frames/(?<frameid>.*)",
      "summary": "Return the specified Frame.",
      "handler_class": "class water.api.FramesHandler",
      "handler_method": "public water.api.FramesV3 water.api.FramesHandler.fetch(int,water.api.FramesV3)",
      "input_schema": "FramesV3",
      "output_schema": "FramesV3",
      "doc_method": "",
      "path_params": [
        "frame_id"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Frames",
      "summary": "Return all Frames in the H2O distributed K/V store.",
      "handler_class": "class water.api.FramesHandler",
      "handler_method": "public water.api.FramesV3 water.api.FramesHandler.list(int,water.api.FramesV3)",
      "input_schema": "FramesV3",
      "output_schema": "FramesV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "DELETE",
      "url_pattern": "/3/Frames/(?<frameid>.*)",
      "summary": "Delete the specified Frame from the H2O distributed K/V store.",
      "handler_class": "class water.api.FramesHandler",
      "handler_method": "public water.api.FramesV3 water.api.FramesHandler.delete(int,water.api.FramesV3)",
      "input_schema": "FramesV3",
      "output_schema": "FramesV3",
      "doc_method": "",
      "path_params": [
        "frame_id"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "DELETE",
      "url_pattern": "/3/Frames",
      "summary": "Delete all Frames from the H2O distributed K/V store.",
      "handler_class": "class water.api.FramesHandler",
      "handler_method": "public water.api.FramesV3 water.api.FramesHandler.deleteAll(int,water.api.FramesV3)",
      "input_schema": "FramesV3",
      "output_schema": "FramesV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Models/(?<modelid>.*)/preview",
      "summary": "Return potentially abridged model suitable for viewing in a browser (currently only used for java model code).",
      "handler_class": "class water.api.ModelsHandler",
      "handler_method": "public water.api.ModelsV3 water.api.ModelsHandler.fetchPreview(int,water.api.ModelsV3)",
      "input_schema": "ModelsV3",
      "output_schema": "ModelsV3",
      "doc_method": "",
      "path_params": [
        "model_id"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Models/(?<modelid>.*)",
      "summary": "Return the specified Model from the H2O distributed K/V store, optionally with the list of compatible Frames.",
      "handler_class": "class water.api.ModelsHandler",
      "handler_method": "public water.api.ModelsV3 water.api.ModelsHandler.fetch(int,water.api.ModelsV3)",
      "input_schema": "ModelsV3",
      "output_schema": "ModelsV3",
      "doc_method": "",
      "path_params": [
        "model_id"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Models",
      "summary": "Return all Models from the H2O distributed K/V store.",
      "handler_class": "class water.api.ModelsHandler",
      "handler_method": "public water.api.ModelsV3 water.api.ModelsHandler.list(int,water.api.ModelsV3)",
      "input_schema": "ModelsV3",
      "output_schema": "ModelsV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "DELETE",
      "url_pattern": "/3/Models/(?<modelid>.*)",
      "summary": "Delete the specified Model from the H2O distributed K/V store.",
      "handler_class": "class water.api.ModelsHandler",
      "handler_method": "public water.api.ModelsV3 water.api.ModelsHandler.delete(int,water.api.ModelsV3)",
      "input_schema": "ModelsV3",
      "output_schema": "ModelsV3",
      "doc_method": "",
      "path_params": [
        "model_id"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "DELETE",
      "url_pattern": "/3/Models",
      "summary": "Delete all Models from the H2O distributed K/V store.",
      "handler_class": "class water.api.ModelsHandler",
      "handler_method": "public water.api.ModelsV3 water.api.ModelsHandler.deleteAll(int,water.api.ModelsV3)",
      "input_schema": "ModelsV3",
      "output_schema": "ModelsV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/ModelBuilders/(?<algo>.*)",
      "summary": "Return the Model Builder metadata for the specified algorithm.",
      "handler_class": "class water.api.ModelBuildersHandler",
      "handler_method": "public water.api.ModelBuildersV3 water.api.ModelBuildersHandler.fetch(int,water.api.ModelBuildersV3)",
      "input_schema": "ModelBuildersV3",
      "output_schema": "ModelBuildersV3",
      "doc_method": "",
      "path_params": [
        "algo"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/ModelBuilders",
      "summary": "Return the Model Builder metadata for all available algorithms.",
      "handler_class": "class water.api.ModelBuildersHandler",
      "handler_method": "public water.api.ModelBuildersV3 water.api.ModelBuildersHandler.list(int,water.api.ModelBuildersV3)",
      "input_schema": "ModelBuildersV3",
      "output_schema": "ModelBuildersV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/ModelMetrics/models/(?<model>.*)/frames/(?<frame>.*)",
      "summary": "Return the saved scoring metrics for the specified Model and Frame.",
      "handler_class": "class water.api.ModelMetricsHandler",
      "handler_method": "public water.api.ModelMetricsHandler$ModelMetricsListSchemaV3 water.api.ModelMetricsHandler.fetch(int,water.api.ModelMetricsHandler$ModelMetricsListSchemaV3)",
      "input_schema": "ModelMetricsListSchemaV3",
      "output_schema": "ModelMetricsListSchemaV3",
      "doc_method": "",
      "path_params": [
        "model",
        "frame"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "DELETE",
      "url_pattern": "/3/ModelMetrics/models/(?<model>.*)/frames/(?<frame>.*)",
      "summary": "Return the saved scoring metrics for the specified Model and Frame.",
      "handler_class": "class water.api.ModelMetricsHandler",
      "handler_method": "public water.api.ModelMetricsHandler$ModelMetricsListSchemaV3 water.api.ModelMetricsHandler.delete(int,water.api.ModelMetricsHandler$ModelMetricsListSchemaV3)",
      "input_schema": "ModelMetricsListSchemaV3",
      "output_schema": "ModelMetricsListSchemaV3",
      "doc_method": "",
      "path_params": [
        "model",
        "frame"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/ModelMetrics/models/(?<model>.*)",
      "summary": "Return the saved scoring metrics for the specified Model.",
      "handler_class": "class water.api.ModelMetricsHandler",
      "handler_method": "public water.api.ModelMetricsHandler$ModelMetricsListSchemaV3 water.api.ModelMetricsHandler.fetch(int,water.api.ModelMetricsHandler$ModelMetricsListSchemaV3)",
      "input_schema": "ModelMetricsListSchemaV3",
      "output_schema": "ModelMetricsListSchemaV3",
      "doc_method": "",
      "path_params": [
        "model"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/ModelMetrics/frames/(?<frame>.*)/models/(?<model>.*)",
      "summary": "Return the saved scoring metrics for the specified Model and Frame.",
      "handler_class": "class water.api.ModelMetricsHandler",
      "handler_method": "public water.api.ModelMetricsHandler$ModelMetricsListSchemaV3 water.api.ModelMetricsHandler.fetch(int,water.api.ModelMetricsHandler$ModelMetricsListSchemaV3)",
      "input_schema": "ModelMetricsListSchemaV3",
      "output_schema": "ModelMetricsListSchemaV3",
      "doc_method": "",
      "path_params": [
        "frame",
        "model"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "DELETE",
      "url_pattern": "/3/ModelMetrics/frames/(?<frame>.*)/models/(?<model>.*)",
      "summary": "Return the saved scoring metrics for the specified Model and Frame.",
      "handler_class": "class water.api.ModelMetricsHandler",
      "handler_method": "public water.api.ModelMetricsHandler$ModelMetricsListSchemaV3 water.api.ModelMetricsHandler.delete(int,water.api.ModelMetricsHandler$ModelMetricsListSchemaV3)",
      "input_schema": "ModelMetricsListSchemaV3",
      "output_schema": "ModelMetricsListSchemaV3",
      "doc_method": "",
      "path_params": [
        "frame",
        "model"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/ModelMetrics/frames/(?<frame>.*)",
      "summary": "Return the saved scoring metrics for the specified Frame.",
      "handler_class": "class water.api.ModelMetricsHandler",
      "handler_method": "public water.api.ModelMetricsHandler$ModelMetricsListSchemaV3 water.api.ModelMetricsHandler.fetch(int,water.api.ModelMetricsHandler$ModelMetricsListSchemaV3)",
      "input_schema": "ModelMetricsListSchemaV3",
      "output_schema": "ModelMetricsListSchemaV3",
      "doc_method": "",
      "path_params": [
        "frame"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/ModelMetrics",
      "summary": "Return all the saved scoring metrics.",
      "handler_class": "class water.api.ModelMetricsHandler",
      "handler_method": "public water.api.ModelMetricsHandler$ModelMetricsListSchemaV3 water.api.ModelMetricsHandler.fetch(int,water.api.ModelMetricsHandler$ModelMetricsListSchemaV3)",
      "input_schema": "ModelMetricsListSchemaV3",
      "output_schema": "ModelMetricsListSchemaV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelMetrics/models/(?<model>.*)/frames/(?<frame>.*)",
      "summary": "Return the scoring metrics for the specified Frame with the specified Model.  If the Frame has already been scored with the Model then cached results will be returned; otherwise predictions for all rows in the Frame will be generated and the metrics will be returned.",
      "handler_class": "class water.api.ModelMetricsHandler",
      "handler_method": "public water.api.ModelMetricsHandler$ModelMetricsListSchemaV3 water.api.ModelMetricsHandler.score(int,water.api.ModelMetricsHandler$ModelMetricsListSchemaV3)",
      "input_schema": "ModelMetricsListSchemaV3",
      "output_schema": "ModelMetricsListSchemaV3",
      "doc_method": "",
      "path_params": [
        "model",
        "frame"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/Predictions/models/(?<model>.*)/frames/(?<frame>.*)",
      "summary": "Score (generate predictions) for the specified Frame with the specified Model.  Both the Frame of predictions and the metrics will be returned.",
      "handler_class": "class water.api.ModelMetricsHandler",
      "handler_method": "public water.api.ModelMetricsHandler$ModelMetricsListSchemaV3 water.api.ModelMetricsHandler.predict(int,water.api.ModelMetricsHandler$ModelMetricsListSchemaV3)",
      "input_schema": "ModelMetricsListSchemaV3",
      "output_schema": "ModelMetricsListSchemaV3",
      "doc_method": "",
      "path_params": [
        "model",
        "frame"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/WaterMeterCpuTicks/(?<nodeidx>.*)",
      "summary": "Return a CPU usage snapshot of all cores of all nodes in the H2O cluster.",
      "handler_class": "class water.api.WaterMeterCpuTicksHandler",
      "handler_method": "public water.api.WaterMeterCpuTicksV3 water.api.WaterMeterCpuTicksHandler.fetch(int,water.api.WaterMeterCpuTicksV3)",
      "input_schema": "WaterMeterCpuTicksV3",
      "output_schema": "WaterMeterCpuTicksV3",
      "doc_method": "",
      "path_params": [
        "nodeidx"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/WaterMeterIo/(?<nodeidx>.*)",
      "summary": "Return IO usage snapshot of all nodes in the H2O cluster.",
      "handler_class": "class water.api.WaterMeterIoHandler",
      "handler_method": "public water.api.WaterMeterIoV3 water.api.WaterMeterIoHandler.fetch(int,water.api.WaterMeterIoV3)",
      "input_schema": "WaterMeterIoV3",
      "output_schema": "WaterMeterIoV3",
      "doc_method": "",
      "path_params": [
        "nodeidx"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/WaterMeterIo",
      "summary": "Return IO usage snapshot of all nodes in the H2O cluster.",
      "handler_class": "class water.api.WaterMeterIoHandler",
      "handler_method": "public water.api.WaterMeterIoV3 water.api.WaterMeterIoHandler.fetch_all(int,water.api.WaterMeterIoV3)",
      "input_schema": "WaterMeterIoV3",
      "output_schema": "WaterMeterIoV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/NodePersistentStorage/categories/(?<category>.*)/names/(?<name>.*)/exists",
      "summary": "Return true or false.",
      "handler_class": "class water.api.NodePersistentStorageHandler",
      "handler_method": "public water.api.NodePersistentStorageV3 water.api.NodePersistentStorageHandler.exists(int,water.api.NodePersistentStorageV3)",
      "input_schema": "NodePersistentStorageV3",
      "output_schema": "NodePersistentStorageV3",
      "doc_method": "",
      "path_params": [
        "category",
        "name"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/NodePersistentStorage/categories/(?<category>.*)/exists",
      "summary": "Return true or false.",
      "handler_class": "class water.api.NodePersistentStorageHandler",
      "handler_method": "public water.api.NodePersistentStorageV3 water.api.NodePersistentStorageHandler.exists(int,water.api.NodePersistentStorageV3)",
      "input_schema": "NodePersistentStorageV3",
      "output_schema": "NodePersistentStorageV3",
      "doc_method": "",
      "path_params": [
        "category"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/NodePersistentStorage/configured",
      "summary": "Return true or false.",
      "handler_class": "class water.api.NodePersistentStorageHandler",
      "handler_method": "public water.api.NodePersistentStorageV3 water.api.NodePersistentStorageHandler.configured(int,water.api.NodePersistentStorageV3)",
      "input_schema": "NodePersistentStorageV3",
      "output_schema": "NodePersistentStorageV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/NodePersistentStorage/(?<category>.*)/(?<name>.*)",
      "summary": "Store a named value.",
      "handler_class": "class water.api.NodePersistentStorageHandler",
      "handler_method": "public water.api.NodePersistentStorageV3 water.api.NodePersistentStorageHandler.put_with_name(int,water.api.NodePersistentStorageV3)",
      "input_schema": "NodePersistentStorageV3",
      "output_schema": "NodePersistentStorageV3",
      "doc_method": "",
      "path_params": [
        "category",
        "name"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/NodePersistentStorage/(?<category>.*)/(?<name>.*)",
      "summary": "Return value for a given name.",
      "handler_class": "class water.api.NodePersistentStorageHandler",
      "handler_method": "public water.api.NodePersistentStorageV3 water.api.NodePersistentStorageHandler.get_as_string(int,water.api.NodePersistentStorageV3)",
      "input_schema": "NodePersistentStorageV3",
      "output_schema": "NodePersistentStorageV3",
      "doc_method": "",
      "path_params": [
        "category",
        "name"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "DELETE",
      "url_pattern": "/3/NodePersistentStorage/(?<category>.*)/(?<name>.*)",
      "summary": "Delete a key.",
      "handler_class": "class water.api.NodePersistentStorageHandler",
      "handler_method": "public water.api.NodePersistentStorageV3 water.api.NodePersistentStorageHandler.delete(int,water.api.NodePersistentStorageV3)",
      "input_schema": "NodePersistentStorageV3",
      "output_schema": "NodePersistentStorageV3",
      "doc_method": "",
      "path_params": [
        "category",
        "name"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/NodePersistentStorage/(?<category>.*)",
      "summary": "Store a value.",
      "handler_class": "class water.api.NodePersistentStorageHandler",
      "handler_method": "public water.api.NodePersistentStorageV3 water.api.NodePersistentStorageHandler.put(int,water.api.NodePersistentStorageV3)",
      "input_schema": "NodePersistentStorageV3",
      "output_schema": "NodePersistentStorageV3",
      "doc_method": "",
      "path_params": [
        "category"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/NodePersistentStorage/(?<category>.*)",
      "summary": "Return all keys stored for a given category.",
      "handler_class": "class water.api.NodePersistentStorageHandler",
      "handler_method": "public water.api.NodePersistentStorageV3 water.api.NodePersistentStorageHandler.list(int,water.api.NodePersistentStorageV3)",
      "input_schema": "NodePersistentStorageV3",
      "output_schema": "NodePersistentStorageV3",
      "doc_method": "",
      "path_params": [
        "category"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Logs/nodes/(?<nodeidx>.*)/files/(?<name>.*)",
      "summary": "Get named log file for a node.",
      "handler_class": "class water.api.LogsHandler",
      "handler_method": "public water.api.LogsV3 water.api.LogsHandler.fetch(int,water.api.LogsV3)",
      "input_schema": "LogsV3",
      "output_schema": "LogsV3",
      "doc_method": "",
      "path_params": [
        "nodeidx",
        "name"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/KillMinus3",
      "summary": "Kill minus 3 on *this* node",
      "handler_class": "class water.api.KillMinus3Handler",
      "handler_method": "public water.api.KillMinus3V3 water.api.KillMinus3Handler.killm3(int,water.api.KillMinus3V3)",
      "input_schema": "KillMinus3V3",
      "output_schema": "KillMinus3V3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/Rapids",
      "summary": "Something something R exec something.",
      "handler_class": "class water.api.RapidsHandler",
      "handler_method": "public water.api.RapidsV3 water.api.RapidsHandler.exec(int,water.api.RapidsV3)",
      "input_schema": "RapidsV3",
      "output_schema": "RapidsV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/Rapids/isEval",
      "summary": "something something r exec something.",
      "handler_class": "class water.api.RapidsHandler",
      "handler_method": "public water.api.RapidsV3 water.api.RapidsHandler.isEvaluated(int,water.api.RapidsV3)",
      "input_schema": "RapidsV3",
      "output_schema": "RapidsV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/DownloadDataset",
      "summary": "Download something something.",
      "handler_class": "class water.api.DownloadDataHandler",
      "handler_method": "public water.api.DownloadDataV3 water.api.DownloadDataHandler.fetch(int,water.api.DownloadDataV3)",
      "input_schema": "DownloadDataV3",
      "output_schema": "DownloadDataV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "DELETE",
      "url_pattern": "/3/DKV/(?<key>.*)",
      "summary": "Remove an arbitrary key from the H2O distributed K/V store.",
      "handler_class": "class water.api.RemoveHandler",
      "handler_method": "public water.api.RemoveV3 water.api.RemoveHandler.remove(int,water.api.RemoveV3)",
      "input_schema": "RemoveV3",
      "output_schema": "RemoveV3",
      "doc_method": "",
      "path_params": [
        "key"
      ],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "DELETE",
      "url_pattern": "/3/DKV",
      "summary": "Remove all keys from the H2O distributed K/V store.",
      "handler_class": "class water.api.RemoveAllHandler",
      "handler_method": "public water.api.RemoveAllV3 water.api.RemoveAllHandler.remove(int,water.api.RemoveAllV3)",
      "input_schema": "RemoveAllV3",
      "output_schema": "RemoveAllV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/LogAndEcho",
      "summary": "Save a message to the H2O logfile.",
      "handler_class": "class water.api.LogAndEchoHandler",
      "handler_method": "public water.api.LogAndEchoV3 water.api.LogAndEchoHandler.echo(int,water.api.LogAndEchoV3)",
      "input_schema": "LogAndEchoV3",
      "output_schema": "LogAndEchoV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/3/InitID",
      "summary": "Issue a new session ID.",
      "handler_class": "class water.api.InitIDHandler",
      "handler_method": "public water.api.InitIDV3 water.api.InitIDHandler.issue(int,water.api.InitIDV3)",
      "input_schema": "InitIDV3",
      "output_schema": "InitIDV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "GET",
      "url_pattern": "/99/Sample",
      "summary": "Example of an experimental endpoint.  Call via /EXPERIMENTAL/Sample.  Experimental endpoints can change at any moment.",
      "handler_class": "class water.api.CloudHandler",
      "handler_method": "public water.api.CloudV3 water.api.CloudHandler.status(int,water.api.CloudV3)",
      "input_schema": "CloudV3",
      "output_schema": "CloudV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelBuilders/gbm",
      "summary": "Train a GBM model on the specified Frame.",
      "handler_class": "class hex.api.GBMBuilderHandler",
      "handler_method": "public water.api.Schema hex.api.GBMBuilderHandler.train(int,hex.schemas.GBMV3)",
      "input_schema": "GBMV3",
      "output_schema": "Schema",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelBuilders/gbm/parameters",
      "summary": "Validate a set of GBM model builder parameters.",
      "handler_class": "class hex.api.GBMBuilderHandler",
      "handler_method": "public hex.schemas.GBMV3 hex.api.GBMBuilderHandler.validate_parameters(int,hex.schemas.GBMV3)",
      "input_schema": "GBMV3",
      "output_schema": "GBMV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelBuilders/drf",
      "summary": "Train a DRF model on the specified Frame.",
      "handler_class": "class hex.api.DRFBuilderHandler",
      "handler_method": "public water.api.Schema hex.api.DRFBuilderHandler.train(int,hex.schemas.DRFV3)",
      "input_schema": "DRFV3",
      "output_schema": "Schema",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelBuilders/drf/parameters",
      "summary": "Validate a set of DRF model builder parameters.",
      "handler_class": "class hex.api.DRFBuilderHandler",
      "handler_method": "public hex.schemas.DRFV3 hex.api.DRFBuilderHandler.validate_parameters(int,hex.schemas.DRFV3)",
      "input_schema": "DRFV3",
      "output_schema": "DRFV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelBuilders/kmeans",
      "summary": "Train a KMeans model on the specified Frame.",
      "handler_class": "class hex.api.KMeansBuilderHandler",
      "handler_method": "public water.api.Schema hex.api.KMeansBuilderHandler.train(int,hex.schemas.KMeansV3)",
      "input_schema": "KMeansV3",
      "output_schema": "Schema",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelBuilders/kmeans/parameters",
      "summary": "Validate a set of KMeans model builder parameters.",
      "handler_class": "class hex.api.KMeansBuilderHandler",
      "handler_method": "public hex.schemas.KMeansV3 hex.api.KMeansBuilderHandler.validate_parameters(int,hex.schemas.KMeansV3)",
      "input_schema": "KMeansV3",
      "output_schema": "KMeansV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelBuilders/deeplearning",
      "summary": "Train a Deep Learning model on the specified Frame.",
      "handler_class": "class hex.api.DeepLearningBuilderHandler",
      "handler_method": "public water.api.Schema hex.api.DeepLearningBuilderHandler.train(int,hex.schemas.DeepLearningV3)",
      "input_schema": "DeepLearningV3",
      "output_schema": "Schema",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelBuilders/deeplearning/parameters",
      "summary": "Validate a set of Deep Learning model builder parameters.",
      "handler_class": "class hex.api.DeepLearningBuilderHandler",
      "handler_method": "public hex.schemas.DeepLearningV3 hex.api.DeepLearningBuilderHandler.validate_parameters(int,hex.schemas.DeepLearningV3)",
      "input_schema": "DeepLearningV3",
      "output_schema": "DeepLearningV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelBuilders/glm",
      "summary": "Train a GLM model on the specified Frame.",
      "handler_class": "class hex.api.GLMBuilderHandler",
      "handler_method": "public water.api.Schema hex.api.GLMBuilderHandler.train(int,hex.schemas.GLMV3)",
      "input_schema": "GLMV3",
      "output_schema": "Schema",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelBuilders/glm/parameters",
      "summary": "Validate a set of GLM model builder parameters.",
      "handler_class": "class hex.api.GLMBuilderHandler",
      "handler_method": "public hex.schemas.GLMV3 hex.api.GLMBuilderHandler.validate_parameters(int,hex.schemas.GLMV3)",
      "input_schema": "GLMV3",
      "output_schema": "GLMV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/MakeGLMModel",
      "summary": "make a new GLM model based on existing one",
      "handler_class": "class hex.api.MakeGLMModelHandler",
      "handler_method": "public hex.schemas.GLMModelV3 hex.api.MakeGLMModelHandler.make_model(int,hex.schemas.MakeGLMModelV3)",
      "input_schema": "MakeGLMModelV3",
      "output_schema": "GLMModelV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelBuilders/pca",
      "summary": "Train a PCA model on the specified Frame.",
      "handler_class": "class hex.api.PCABuilderHandler",
      "handler_method": "public water.api.Schema hex.api.PCABuilderHandler.train(int,hex.schemas.PCAV3)",
      "input_schema": "PCAV3",
      "output_schema": "Schema",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelBuilders/pca/parameters",
      "summary": "Validate a set of PCA model builder parameters.",
      "handler_class": "class hex.api.PCABuilderHandler",
      "handler_method": "public hex.schemas.PCAV3 hex.api.PCABuilderHandler.validate_parameters(int,hex.schemas.PCAV3)",
      "input_schema": "PCAV3",
      "output_schema": "PCAV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelBuilders/naivebayes",
      "summary": "Train a Naive Bayes model on the specified Frame.",
      "handler_class": "class hex.api.NaiveBayesBuilderHandler",
      "handler_method": "public water.api.Schema hex.api.NaiveBayesBuilderHandler.train(int,hex.schemas.NaiveBayesV3)",
      "input_schema": "NaiveBayesV3",
      "output_schema": "Schema",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    },
    {
      "__meta": {
        "schema_version": 3,
        "schema_name": "RouteV3",
        "schema_type": "Route"
      },
      "http_method": "POST",
      "url_pattern": "/3/ModelBuilders/naivebayes/parameters",
      "summary": "Validate a set of Naive Bayes model builder parameters.",
      "handler_class": "class hex.api.NaiveBayesBuilderHandler",
      "handler_method": "public hex.schemas.NaiveBayesV3 hex.api.NaiveBayesBuilderHandler.validate_parameters(int,hex.schemas.NaiveBayesV3)",
      "input_schema": "NaiveBayesV3",
      "output_schema": "NaiveBayesV3",
      "doc_method": "",
      "path_params": [],
      "markdown": null
    }
  ],
  "schemas": null,
  "markdown": "[//]: # (Preview with http://jbt.github.io/markdown-editor)\n# REST API Routes Table of Contents\n---\nHTTP method | URI pattern | Input schema | Output schema | Summary\n--- | --- | --- | --- | ---\nPOST | /3/CreateFrame | CreateFrameV3 | CreateFrameV3 | Create a synthetic H2O Frame.\nPOST | /3/SplitFrame | SplitFrameV3 | SplitFrameV3 | Split a H2O Frame.\nPOST | /3/MissingInserter | MissingInserterV3 | MissingInserterV3 | Insert missing values.\nGET | /3/ImportFiles | ImportFilesV3 | ImportFilesV3 | Import raw data files into a single-column H2O Frame.\nPOST | /3/ParseSetup | ParseSetupV3 | ParseSetupV3 | Guess the parameters for parsing raw byte-oriented data into an H2O Frame.\nPOST | /3/Parse | ParseV3 | ParseV3 | Parse a raw byte-oriented Frame into a useful columnar data Frame.\nGET | /3/Cloud | CloudV3 | CloudV3 | Determine the status of the nodes in the H2O cloud.\nHEAD | /3/Cloud | CloudV3 | CloudV3 | Determine the status of the nodes in the H2O cloud.\nGET | /3/Jobs | JobsV3 | Schema | Get a list of all the H2O Jobs (long-running actions).\nGET | /3/Timeline | TimelineV3 | TimelineV3 | Something something something.\nGET | /3/Profiler | ProfilerV3 | ProfilerV3 | Something something something.\nGET | /3/JStack | JStackV3 | JStackV3 | Something something something.\nGET | /3/NetworkTest | NetworkTestV3 | NetworkTestV3 | Something something something.\nPOST | /3/UnlockKeys | UnlockKeysV3 | UnlockKeysV3 | Unlock all keys in the H2O distributed K/V store, to attempt to recover from a crash.\nPOST | /3/Shutdown | ShutdownV3 | ShutdownV3 | Shut down the cluster\nGET | /3/Tutorials | TutorialsV3 | TutorialsV3 | H2O tutorials.\nGET | /3/About | AboutV3 | AboutV3 | Return information about this H2O.\nGET | /3/Metadata/endpoints/{num>[0-9]+) | DocsV3 | DocsV3 | Return the REST API endpoint metadata, including documentation, for the endpoint specified by number.\nGET | /3/Metadata/endpoints/{path} | DocsV3 | DocsV3 | Return the REST API endpoint metadata, including documentation, for the endpoint specified by path.\nGET | /3/Metadata/endpoints | DocsV3 | DocsV3 | Return a list of all the REST API endpoints.\nGET | /3/Metadata/schemaclasses/{classname} | DocsV3 | DocsV3 | Return the REST API schema metadata for specified schema class.\nGET | /3/Metadata/schemas/{schemaname} | DocsV3 | DocsV3 | Return the REST API schema metadata for specified schema.\nGET | /3/Metadata/schemas | DocsV3 | DocsV3 | Return list of all REST API schemas.\nGET | /3/Typeahead/files | TypeaheadV3 | Schema | Typehead hander for filename completion.\nGET | /3/Jobs/{jobid} | JobsV3 | Schema | Get the status of the given H2O Job (long-running action).\nPOST | /3/Jobs/{jobid}/cancel | JobsV3 | Schema | Cancel a running job.\nGET | /3/Find | FindV3 | FindV3 | Find a value within a Frame.\nGET | /3/Frames/{frameid}/export/{path}/overwrite/{force} | FramesV3 | FramesV3 | Export a Frame to the given path with optional overwrite.\nGET | /3/Frames/{frameid}/columns/{column}/summary | FramesV3 | FramesV3 | Return the summary metrics for a column, e.g. mins, maxes, mean, sigma, percentiles, etc.\nGET | /3/Frames/{frameid}/columns/{column}/domain | FramesV3 | FramesV3 | Return the domains for the specified column. \"null\" if the column is not an Enum.\nGET | /3/Frames/{frameid}/columns/{column} | FramesV3 | FramesV3 | Return the specified column from a Frame.\nGET | /3/Frames/{frameid}/columns | FramesV3 | FramesV3 | Return all the columns from a Frame.\nGET | /3/Frames/{frameid}/summary | FramesV3 | FramesV3 | Return a Frame, including the histograms, after forcing computation of rollups.\nGET | /3/Frames/{frameid} | FramesV3 | FramesV3 | Return the specified Frame.\nGET | /3/Frames | FramesV3 | FramesV3 | Return all Frames in the H2O distributed K/V store.\nDELETE | /3/Frames/{frameid} | FramesV3 | FramesV3 | Delete the specified Frame from the H2O distributed K/V store.\nDELETE | /3/Frames | FramesV3 | FramesV3 | Delete all Frames from the H2O distributed K/V store.\nGET | /3/Models/{modelid}/preview | ModelsV3 | ModelsV3 | Return potentially abridged model suitable for viewing in a browser (currently only used for java model code).\nGET | /3/Models/{modelid} | ModelsV3 | ModelsV3 | Return the specified Model from the H2O distributed K/V store, optionally with the list of compatible Frames.\nGET | /3/Models | ModelsV3 | ModelsV3 | Return all Models from the H2O distributed K/V store.\nDELETE | /3/Models/{modelid} | ModelsV3 | ModelsV3 | Delete the specified Model from the H2O distributed K/V store.\nDELETE | /3/Models | ModelsV3 | ModelsV3 | Delete all Models from the H2O distributed K/V store.\nGET | /3/ModelBuilders/{algo} | ModelBuildersV3 | ModelBuildersV3 | Return the Model Builder metadata for the specified algorithm.\nGET | /3/ModelBuilders | ModelBuildersV3 | ModelBuildersV3 | Return the Model Builder metadata for all available algorithms.\nGET | /3/ModelMetrics/models/{model}/frames/{frame} | ModelMetricsListSchemaV3 | ModelMetricsListSchemaV3 | Return the saved scoring metrics for the specified Model and Frame.\nDELETE | /3/ModelMetrics/models/{model}/frames/{frame} | ModelMetricsListSchemaV3 | ModelMetricsListSchemaV3 | Return the saved scoring metrics for the specified Model and Frame.\nGET | /3/ModelMetrics/models/{model} | ModelMetricsListSchemaV3 | ModelMetricsListSchemaV3 | Return the saved scoring metrics for the specified Model.\nGET | /3/ModelMetrics/frames/{frame}/models/{model} | ModelMetricsListSchemaV3 | ModelMetricsListSchemaV3 | Return the saved scoring metrics for the specified Model and Frame.\nDELETE | /3/ModelMetrics/frames/{frame}/models/{model} | ModelMetricsListSchemaV3 | ModelMetricsListSchemaV3 | Return the saved scoring metrics for the specified Model and Frame.\nGET | /3/ModelMetrics/frames/{frame} | ModelMetricsListSchemaV3 | ModelMetricsListSchemaV3 | Return the saved scoring metrics for the specified Frame.\nGET | /3/ModelMetrics | ModelMetricsListSchemaV3 | ModelMetricsListSchemaV3 | Return all the saved scoring metrics.\nPOST | /3/ModelMetrics/models/{model}/frames/{frame} | ModelMetricsListSchemaV3 | ModelMetricsListSchemaV3 | Return the scoring metrics for the specified Frame with the specified Model.  If the Frame has already been scored with the Model then cached results will be returned; otherwise predictions for all rows in the Frame will be generated and the metrics will be returned.\nPOST | /3/Predictions/models/{model}/frames/{frame} | ModelMetricsListSchemaV3 | ModelMetricsListSchemaV3 | Score (generate predictions) for the specified Frame with the specified Model.  Both the Frame of predictions and the metrics will be returned.\nGET | /3/WaterMeterCpuTicks/{nodeidx} | WaterMeterCpuTicksV3 | WaterMeterCpuTicksV3 | Return a CPU usage snapshot of all cores of all nodes in the H2O cluster.\nGET | /3/WaterMeterIo/{nodeidx} | WaterMeterIoV3 | WaterMeterIoV3 | Return IO usage snapshot of all nodes in the H2O cluster.\nGET | /3/WaterMeterIo | WaterMeterIoV3 | WaterMeterIoV3 | Return IO usage snapshot of all nodes in the H2O cluster.\nGET | /3/NodePersistentStorage/categories/{category}/names/{name}/exists | NodePersistentStorageV3 | NodePersistentStorageV3 | Return true or false.\nGET | /3/NodePersistentStorage/categories/{category}/exists | NodePersistentStorageV3 | NodePersistentStorageV3 | Return true or false.\nGET | /3/NodePersistentStorage/configured | NodePersistentStorageV3 | NodePersistentStorageV3 | Return true or false.\nPOST | /3/NodePersistentStorage/{category}/{name} | NodePersistentStorageV3 | NodePersistentStorageV3 | Store a named value.\nGET | /3/NodePersistentStorage/{category}/{name} | NodePersistentStorageV3 | NodePersistentStorageV3 | Return value for a given name.\nDELETE | /3/NodePersistentStorage/{category}/{name} | NodePersistentStorageV3 | NodePersistentStorageV3 | Delete a key.\nPOST | /3/NodePersistentStorage/{category} | NodePersistentStorageV3 | NodePersistentStorageV3 | Store a value.\nGET | /3/NodePersistentStorage/{category} | NodePersistentStorageV3 | NodePersistentStorageV3 | Return all keys stored for a given category.\nGET | /3/Logs/nodes/{nodeidx}/files/{name} | LogsV3 | LogsV3 | Get named log file for a node.\nGET | /3/KillMinus3 | KillMinus3V3 | KillMinus3V3 | Kill minus 3 on *this* node\nPOST | /3/Rapids | RapidsV3 | RapidsV3 | Something something R exec something.\nGET | /3/Rapids/isEval | RapidsV3 | RapidsV3 | something something r exec something.\nGET | /3/DownloadDataset | DownloadDataV3 | DownloadDataV3 | Download something something.\nDELETE | /3/DKV/{key} | RemoveV3 | RemoveV3 | Remove an arbitrary key from the H2O distributed K/V store.\nDELETE | /3/DKV | RemoveAllV3 | RemoveAllV3 | Remove all keys from the H2O distributed K/V store.\nPOST | /3/LogAndEcho | LogAndEchoV3 | LogAndEchoV3 | Save a message to the H2O logfile.\nGET | /3/InitID | InitIDV3 | InitIDV3 | Issue a new session ID.\nGET | /99/Sample | CloudV3 | CloudV3 | Example of an experimental endpoint.  Call via /EXPERIMENTAL/Sample.  Experimental endpoints can change at any moment.\nPOST | /3/ModelBuilders/gbm | GBMV3 | Schema | Train a GBM model on the specified Frame.\nPOST | /3/ModelBuilders/gbm/parameters | GBMV3 | GBMV3 | Validate a set of GBM model builder parameters.\nPOST | /3/ModelBuilders/drf | DRFV3 | Schema | Train a DRF model on the specified Frame.\nPOST | /3/ModelBuilders/drf/parameters | DRFV3 | DRFV3 | Validate a set of DRF model builder parameters.\nPOST | /3/ModelBuilders/kmeans | KMeansV3 | Schema | Train a KMeans model on the specified Frame.\nPOST | /3/ModelBuilders/kmeans/parameters | KMeansV3 | KMeansV3 | Validate a set of KMeans model builder parameters.\nPOST | /3/ModelBuilders/deeplearning | DeepLearningV3 | Schema | Train a Deep Learning model on the specified Frame.\nPOST | /3/ModelBuilders/deeplearning/parameters | DeepLearningV3 | DeepLearningV3 | Validate a set of Deep Learning model builder parameters.\nPOST | /3/ModelBuilders/glm | GLMV3 | Schema | Train a GLM model on the specified Frame.\nPOST | /3/ModelBuilders/glm/parameters | GLMV3 | GLMV3 | Validate a set of GLM model builder parameters.\nPOST | /3/MakeGLMModel | MakeGLMModelV3 | GLMModelV3 | make a new GLM model based on existing one\nPOST | /3/ModelBuilders/pca | PCAV3 | Schema | Train a PCA model on the specified Frame.\nPOST | /3/ModelBuilders/pca/parameters | PCAV3 | PCAV3 | Validate a set of PCA model builder parameters.\nPOST | /3/ModelBuilders/naivebayes | NaiveBayesV3 | Schema | Train a Naive Bayes model on the specified Frame.\nPOST | /3/ModelBuilders/naivebayes/parameters | NaiveBayesV3 | NaiveBayesV3 | Validate a set of Naive Bayes model builder parameters.\n"
}